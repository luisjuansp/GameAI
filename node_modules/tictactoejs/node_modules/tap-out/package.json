{
  "name": "tap-out",
  "version": "1.4.2",
  "description": "A different tap parser",
  "main": "index.js",
  "scripts": {
    "test": "tape test/index.js"
  },
  "bin": {
    "tap-out": "bin/cmd.js"
  },
  "author": {
    "name": "Scott Corgan"
  },
  "license": "MIT",
  "dependencies": {
    "re-emitter": "^1.0.0",
    "readable-stream": "^2.0.0",
    "split": "^1.0.0",
    "trim": "0.0.1"
  },
  "devDependencies": {
    "tape": "^4.0.0"
  },
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scottcorgan/tap-out.git"
  },
  "keywords": [
    "tap",
    "parser",
    "tape",
    "tap-spec",
    "test"
  ],
  "bugs": {
    "url": "https://github.com/scottcorgan/tap-out/issues"
  },
  "homepage": "https://github.com/scottcorgan/tap-out",
  "readme": "# tap-out\n\nA different tap parser\n\n## Install\n\n```\nnpm install tap-out --save\n```\n\n## Usage\n\n**CLI**\n\n```\n$ something-that-produces-tap | tap-out\n{\n  tests: [\n    { name: 'is true', number: 1, raw: '# is true', type: 'test' }\n  ],\n  asserts: [\n    { name: 'true value', number: 1, ok: true, raw: 'ok 1 true value', test: 1, type: 'assert' }, \n    { name: 'true value', number: 2, ok: true, raw: 'ok 2 true value', test: 1, type: 'assert' }\n  ],\n  results: [],\n  versions: [],\n  comments: [],\n  fail: [],\n  pass: [ \n    { name: 'true value', number: 1, ok: true, raw: 'ok 1 true value', test: 1, type: 'assert' },\n    { name: 'true value', number: 2, ok: true, raw: 'ok 2 true value', test: 1, type: 'assert' }\n  ],\n}\n```\n\n**API**\n\n```js\nvar tapOut = require('tap-out');\n\nvar t = tapOut(function (output) {\n  \n  console.log(output);\n});\n\nt.on('assert', function (assert) {\n\n\t// Do something\n});\n\nprocess.stdin.pipe(t);\n```\n\n## Methods\n\n### var t = tapOut(function (err, output) {})\n\nReturns a stream that emits events with various TAP data. Takes a callback which is called when all parsing is done.\n\n## Events\n\n### t.on('output', function (output) {})\n\nAll output after all TAP data is parsed.\n\nExample output\n\n```js\n{\n  tests: [\n    { name: 'is true', number: 1, raw: '# is true', type: 'test' }\n  ],\n  asserts: [\n    { name: 'true value', number: 1, ok: true, raw: 'ok 1 true value', test: 1, type: 'assert' }, \n    { name: 'true value', number: 2, ok: true, raw: 'ok 2 true value', test: 1, type: 'assert' }\n  ],\n  results: [],\n  versions: [],\n  comments: [],\n  fail: [],\n  pass: [ \n    { name: 'true value', number: 1, ok: true, raw: 'ok 1 true value', test: 1, type: 'assert' },\n    { name: 'true value', number: 2, ok: true, raw: 'ok 2 true value', test: 1, type: 'assert' }\n  ],\n}\n```\n\n### t.on('test', function (test) {})\n\nParsed test object with details.\n\n* `type` - value will always be `test`\n* `name` - name of the test\n* `raw` - the raw output before it was parsed\n* `number` - the number of the test\n\n```js\n{\n  type: 'test',\n  name: 'is true',\n  raw: '# is true',\n  number: 1\n}\n```\n\n### t.on('assert', function (assertion) {})\n\nParsed assert object details.\n\n* `type` - this will always be `assert`\n* `name` - the name of the assertion\n* `raw` - the raw output before it was parsed\n* `number` - the number of the assertion\n* `ok` - whether the assertion passed or failed\n* `test` - the number of the test this assertion belongs to\n\n```js\n{\n  name: 'true value',\n  number: 1,\n  ok: true,\n  raw: 'ok 1 true value',\n  test: 1,\n  type: 'assert'\n}\n```\n\n### t.on('version', function (version) {})\n\nParsed version data.\n\n* `type` - this will always be `version`\n* `raw` - the raw output before it was parsed\n\n```js\n{\n  raw: 'TAP version 13',\n  type: 'version'\n}\n```\n\n### t.on('result', function (result) {})\n\nParsed test result data for tests, pass, fail.\n\n* `type` - this will always be `result`\n* `name` - the name of the result\n* `raw` - the raw output before it was parsed\n* `count` - the number of tests related to this result\n\nTests\n\n```js\n{\n  count: '15',\n  name: 'tests',\n  raw: '# tests 15',\n  type: 'result' \n}\n```\n\nPass\n\n```js\n{\n  count: '13',\n  name: 'pass',\n  raw: '# pass  13',\n  type: 'result'\n}\n```\n\nFail\n\n```js\n{\n  count: '2',\n  name: 'fail',\n  raw: '# fail  2',\n  type: 'result'\n}\n```\n\n### t.on('pass', function (assertion) {})\n\nParsed assertion that has passed with details. The assertion formate is the same as the [`assert`](#tonassert-function-assertion-) event.\n\n### t.on('fail', function (assertion) {})\n\nFailed assertion that has passed with details. The assertion formate is the same as the [`assert`](#tonassert-function-assertion-) event.\n\n### t.on('comment', function (comment) {})\n\nGeneric output like `console.log()` in your tests.\n\n* `type` - this will always be `comment`\n* `raw` - the raw output before it was parsed\n* `test` - the nubmer of the test this comment belongs to\n\n```js\n{\n  type: 'comment',\n  raw: 'this is a console log',\n  test: 1\n}\n```\n\n## Run Tests\n\n```\ngit clone git@github.com:scottcorgan/tap-out.git && cd tap-out\nnpm install\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "_id": "tap-out@1.4.2",
  "_shasum": "c907ec1bf9405111d088263e92f5608b88cbb37a",
  "_resolved": "https://registry.npmjs.org/tap-out/-/tap-out-1.4.2.tgz",
  "_from": "https://registry.npmjs.org/tap-out/-/tap-out-1.4.2.tgz"
}
